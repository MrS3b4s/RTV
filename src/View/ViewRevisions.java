/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Classes.Appointment;
import Classes.Revision;
import Classes.User;
import Classes.Vehicules;
import Control.ControlAppointments;
import Control.RevisionsControl;
import java.awt.Color;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Sebas
 */
public class ViewRevisions extends javax.swing.JFrame {

    /**
     * Creates new form ViewRevisions
     */
    private JPanel panelFondo;
    private Vehicules currentV;

    Control.VehiculesControl Vh = new Control.VehiculesControl();
    Control.ControlAppointments Ap = new ControlAppointments();
    Control.RevisionsControl rc = new Control.RevisionsControl();
    private Appointment ap;

    public ViewRevisions() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        Clock();
        updateTablelModelAppointment();

        DefaultTableModel tb = new DefaultTableModel();
        tb.addColumn("Vehicule DNI");
        tb.addColumn("Brand");
        tb.addColumn("Model");

        jTable2.setModel(tb);

        buttonGroup1.add(jrbI);
        buttonGroup1.add(jrbRi);
        buttonGroup2.add(jrba);
        buttonGroup2.add(jrbr);

        jrbI.setSelected(true);
        
        panelFondo = new JPanel();
        panelFondo.setBounds(0, 0, this.getWidth(), this.getHeight());
        panelFondo.setBackground(Color.WHITE);
        add(panelFondo);
    }

    public void updateTablelModelVehicule(Appointment a) {
        DefaultTableModel tb = new DefaultTableModel();
        tb.addColumn("Vehicule DNI");
        tb.addColumn("Brand");
        tb.addColumn("Model");
        Vehicules v = Vh.searchVehicule(a.getVehicule().getVehiculeDNI());

        Object[] fil = new Object[3];
        fil[0] = v.getVehiculeDNI();
        fil[1] = v.getBrand();
        fil[2] = v.getModel();
        tb.addRow(fil);

        jTable2.setModel(tb);
    }

    public void Clock() {
        DateTimeFormatter formateador = DateTimeFormatter.ofPattern("HH:mm:ss");
        Calendar fecha = new GregorianCalendar();
        Runnable runnable = new Runnable() {
            @Override
            public void run() {
                while (true) {
                    try {
                        Thread.sleep(500);
                        String año = String.valueOf(fecha.get(Calendar.YEAR));
                        String mes = String.valueOf(fecha.get(Calendar.MONTH));
                        String dia = String.valueOf(fecha.get(Calendar.DAY_OF_MONTH));
                        txtDate.setText(dia + "/" + mes + "/" + año);
                        txthour.setText(formateador.format(LocalDateTime.now()));

                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        };
        Thread hilo = new Thread(runnable);
        hilo.start();
    }

    public void updateTablelModelAppointment() {
        DefaultTableModel tb = new DefaultTableModel();

        tb.addColumn("Date");
        tb.addColumn("Hour");
        tb.addColumn("Vehicule DNI");
        ArrayList<Appointment> as = Ap.appoinmentList();

        for (Appointment a : as) {
            Object[] o = new Object[3];
            o[0] = a.getDate();
            o[1] = a.getTime();
            o[2] = a.getVehicule().getVehiculeDNI();
            tb.addRow(o);
        }

        jTable1.setModel(tb);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnabsent = new javax.swing.JButton();
        btnpresent = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        btnsave = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jLabel1 = new javax.swing.JLabel();
        jrbI = new javax.swing.JRadioButton();
        jrbRi = new javax.swing.JRadioButton();
        jrba = new javax.swing.JRadioButton();
        jrbr = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txthour = new javax.swing.JTextField();
        txtDate = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jXML = new javax.swing.JTextField();

        jCheckBox1.setText("jCheckBox1");

        jLabel2.setText("Reinspection");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        btnabsent.setText("Absent");
        btnabsent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnabsentActionPerformed(evt);
            }
        });

        btnpresent.setText("Present");
        btnpresent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnpresentActionPerformed(evt);
            }
        });

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable2.setAutoscrolls(false);
        jScrollPane2.setViewportView(jTable2);

        btnsave.setText("Save");
        btnsave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsaveActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(jTextPane1);

        jLabel1.setText("Observations");

        jrbI.setText("Inspection");

        jrbRi.setText("Reinspection");

        jrba.setText("Approved");

        jrbr.setText("Reprobate");

        jLabel3.setText("Date");

        jLabel4.setText("Time");

        txthour.setEditable(false);

        txtDate.setEditable(false);

        jButton1.setText("Exportar XML");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jXML.setText("File_Name");
        jXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jXMLActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnabsent)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnpresent)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jXML, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 408, Short.MAX_VALUE)
                        .addComponent(btnsave))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)
                        .addComponent(jScrollPane3)
                        .addComponent(jLabel1)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jrbI)
                                .addComponent(jrba))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jrbr)
                                .addComponent(jrbRi)))
                        .addComponent(jLabel3)
                        .addComponent(jLabel4)
                        .addComponent(txthour)
                        .addComponent(txtDate)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnabsent, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnpresent)
                            .addComponent(btnsave)
                            .addComponent(jButton1)
                            .addComponent(jXML, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jrbI)
                            .addComponent(jrbRi))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txthour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jrba)
                            .addComponent(jrbr))
                        .addGap(61, 61, 61))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnabsentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnabsentActionPerformed
        if (jTable1.getSelectedRow() > -1) {
            updateTablelModelVehicule(
                    ap = Ap.searchAppointment((String) jTable1.getValueAt(jTable1.getSelectedRow(), 2))
            );
            jTextPane1.setText("The vehicle was not presented for review");
            jrbr.setSelected(true);

        }
    }//GEN-LAST:event_btnabsentActionPerformed

    private void btnpresentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnpresentActionPerformed
        if (jTable1.getSelectedRow() > -1) {
            updateTablelModelVehicule(
                    ap = Ap.searchAppointment((String) jTable1.getValueAt(jTable1.getSelectedRow(), 2))
            );
        }
    }//GEN-LAST:event_btnpresentActionPerformed

    private void btnsaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsaveActionPerformed
        System.out.println(Desktop.currentUser.getDni());
        System.out.println((String) jTable1.getValueAt(jTable1.getSelectedRow(), 2));
        System.out.println(Type());
        System.out.println(jTextPane1.getText());
        System.out.println(State());
        Revision user = new Revision((String) jTable1.getValueAt(jTable1.getSelectedRow(), 2), Desktop.currentUser.getDni(), Type(), jTextPane1.getText(), State());
        if(rc.addRevision(user)){
            JOptionPane.showMessageDialog(null, "Ready");
            Ap.deleteapp(ap);
        }
            //JOptionPane.showMessageDialog(null, "Ready");
           // Ap.deleteapp(ap);
        

    }//GEN-LAST:event_btnsaveActionPerformed

    private void jXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXMLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jXMLActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (jTable1.getSelectedRow() > -1) {
            export(Vh.searchVehicule((String)jTable1.getValueAt(jTable1.getSelectedRow(), 2)));
        }else{
            JOptionPane.showMessageDialog(null, "You have to select an appointment");
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private File file;
    
    public void export(Vehicules v) {
        file = new File(jXML.getText()+".xml");
        if (!file.exists()) {
            try {
                file.createNewFile();
            } catch (IOException ex) {
                Logger.getLogger(ViewRevisions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        write(xmlFormat(v));
        JOptionPane.showMessageDialog(this, "Exported to XML\n"
                + " You will find the file in the root directory of the project.");
    }
    
    public String xmlFormat(Vehicules v){
        ArrayList<Revision> agenda = rc.revisionsList();
        String s = "";
        s += "<?xml version=1.0?x>\n";
        s += "<Vehicule>\n";
        s += "   <VehiculeDNI>"+v.getVehiculeDNI()+"</VehiculeDNI>\n";
        s += "   <Brand>"+v.getBrand()+"</Brand>\n";
        s += "   <Model>"+v.getModel()+"</Model>\n";
        s += "   <Year>"+v.getYear()+"</Year>\n";
        s += "   <InscriptionsDate>"+v.getInscriptionDate()+"</InscriptionsDate>\n";
        s += "   <OwnerDNI>"+v.getOwnerDNI()+"</OwnerDNI>\n";
        s += "   <OwnerName>"+v.getOwnerName()+"</OwnerName>\n";
        s += "   <Revisions>\n";
        
        for (int i = 0; i < agenda.size(); i++) {
            s += "      <Revision>\n"
               + "         <VehculeDNI>"+agenda.get(i).getVehicule()+"</VehculeDNI>\n"
               + "         <Date>"+agenda.get(i).getDate()+"</Date>\n"
               + "         <Time>"+agenda.get(i).getTime()+"</Time>\n"
               + "         <Technician>"+agenda.get(i).getTechnician()+"</Technician>\n"
               + "         <CheckType>"+agenda.get(i).isInspection()+"</CheckType>\n"
               + "         <Observations>"+agenda.get(i).getObservations()+"</Observations>\n"
               + "         <State>"+agenda.get(i).isState()+"</State>\n"
               + "      </Revision>\n";
        }
        s += "   </Revisions>\n";
        s += "</Vehicule>\n";
        return s;
    }
    
    public void write(String s){
        try {
            FileWriter fw = new FileWriter(file);
            BufferedWriter bw = new BufferedWriter(fw);
            
            bw.write(s);
            bw.flush();
        } catch (Exception e) {
        }
        
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewRevisions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewRevisions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewRevisions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewRevisions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewRevisions().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnabsent;
    private javax.swing.JButton btnpresent;
    private javax.swing.JButton btnsave;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextField jXML;
    private javax.swing.JRadioButton jrbI;
    private javax.swing.JRadioButton jrbRi;
    private javax.swing.JRadioButton jrba;
    private javax.swing.JRadioButton jrbr;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txthour;
    // End of variables declaration//GEN-END:variables
public String Type() {
        if (!jrbI.isSelected() && !jrbRi.isSelected()) {
            JOptionPane.showMessageDialog(null, "Type of Revision can´t be empty");
        }
        if (jrbI.isSelected()) {
            return jrbI.getText();
        }
        return jrbRi.getText();
    }

    public String State() {
        if (!jrba.isSelected() && !jrbr.isSelected()) {
            JOptionPane.showMessageDialog(null, "State of Revision can´t be empty");
        }
        if (jrba.isSelected()) {
            return jrbI.getText();
        }
        return jrbr.getText();
    }
}
